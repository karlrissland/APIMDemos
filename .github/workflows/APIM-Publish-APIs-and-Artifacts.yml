name: APIM - Publish APIs and Artifacts

on:
  workflow_call:
    #NOTE: workflow_call doesn't support choice inputs, have to constrain in calling workflow
    inputs:
      environment:
        description: 'environment to extract from'
        required: true
        type: string
        default: 'dev'
   #   CONFIGURATION_YAML_PATH: 
   #     description: 'Choose whether to extract all APIs or extract specific APIs'
   #     required: true
   #     type: string
   #     default: 'configuration.extractor.yaml'

  workflow_dispatch:
    inputs:
      environment: 
        description: 'environment to extract from'
        required: true
        type: environment
  #    CONFIGURATION_YAML_PATH:
  #      description: 'Choose Wether to extract all Apis or extract apis listed an extraction configuration file'     
  #      required: true
  #      type: choice
  #      options:
  #      - Extract All APIs
  #      - configuration.extractor.yaml

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  apiops_release_version: v4.1.2
  RUNNER_DEBUG: 1

jobs:
  # This workflow contains a single job called "build"
  APIM-Import-APIs:
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_RESOURCE_GROUP_NAME: ${{ vars.AZURE_RESOURCE_GROUP_NAME }}
      API_MANAGEMENT_SERVICE_NAME: ${{ vars.API_MANAGEMENT_SERVICE_NAME }}
      API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ GITHUB.WORKSPACE }}/src/APIM
      API_MANAGEMENT_CONFIG_YAML: ${{ GITHUB.WORKSPACE }}/src/apim-configuration.yaml

    steps:
      - run: |
          Write-Host "Environment: ${{inputs.environment}}"
          Write-Host "CONFIGURATION_YAML_PATH: ${{env.CONFIGURATION_YAML_PATH}}"
          Write-Host "API_MANAGEMENT_SERVICE_NAME: ${{env.API_MANAGEMENT_SERVICE_NAME}}"
          Write-Host "AZURE_RESOURCE_GROUP_NAME: ${{env.AZURE_RESOURCE_GROUP_NAME}}"
          Write-Host "API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{env.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH}}"
        shell: pwsh
    
      - uses: actions/checkout@v3
      
      # Using one configuration file for all target environments.
      # Replace tokens with GitHub environment secrets/variables.
      - name: "Replace Environment Specific Tokens"
        uses: cschleiden/replace-tokens@v1.1
        with:
          tokenPrefix: "{#"
          tokenSuffix: "#}"
          files: ${{ env.API_MANAGEMENT_CONFIG_YAML }}
        # specify environment specific secrets to be replaced. For example the QA environment could have a different set sercrets to
        # replace within the configuration.[environment].yaml file
        env:
          API_MANAGEMENT_SERVICE_NAME: "{{env.API_MANAGEMENT_SERVICE_NAME}}"
      
      - name: Run publisher without Config Yaml or Commit ID
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $VerbosePreference = "Continue"
          $InformationPreference = "Continue"

          Write-Information "Downloading publisher..."
          $publisherFileName = "${{ runner.os }}" -like "*win*" ? "publisher.win-x64.exe" : "publisher.linux-x64.exe"
          $uri = "https://github.com/Azure/apiops/releases/download/${{ env.apiops_release_version }}/$publisherFileName"
          $destinationFilePath = Join-Path "${{ runner.temp }}" "publisher.exe"
          Invoke-WebRequest -Uri "$uri" -OutFile "$destinationFilePath"

          if ("${{ runner.os }}" -like "*linux*")
          {
            Write-Information "Setting file permissions..."
            & chmod +x "$destinationFilePath"
            if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
          }

          & "$destinationFilePath"              
          if ($LASTEXITCODE -ne 0) { throw "Running publisher failed."}

          Write-Information "Execution complete."
        shell: pwsh


